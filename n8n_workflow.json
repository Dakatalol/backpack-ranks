{
  "name": "Backpack Volume Tracker - Telegram Reports",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "cronExpression": "0 8 * * *"
            }
          ]
        }
      },
      "id": "schedule-morning",
      "name": "Schedule Morning (8 AM)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 240]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "cronExpression": "0 20 * * *"
            }
          ]
        }
      },
      "id": "schedule-evening",
      "name": "Schedule Evening (8 PM)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [240, 440]
    },
    {
      "parameters": {
        "command": "cd /path/to/backpack-ranks && python n8n_wrapper.py"
      },
      "id": "execute-python",
      "name": "Execute Python Script",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [460, 340],
      "notes": "Replace /path/to/backpack-ranks with your actual project path"
    },
    {
      "parameters": {
        "functionCode": "const data = JSON.parse($input.item.json.stdout);\n\nif (data.status === 'error') {\n  return {\n    json: {\n      chatId: '{{ $json.chatId }}',\n      text: `‚ö†Ô∏è *Backpack Volume Tracker - Error*\\n\\n${data.message}\\n\\nüïê ${data.timestamp}`\n    }\n  };\n}\n\n// Format difficulty score indicator\nlet scoreEmoji = 'üü¢';\nlet scoreDesc = 'GOOD TIME TO FARM';\nconst score = data.analysis.difficulty_score;\n\nif (score >= 120) {\n  scoreEmoji = '‚õî';\n  scoreDesc = 'VERY HARD TO FARM';\n} else if (score >= 105) {\n  scoreEmoji = 'üî¥';\n  scoreDesc = 'HARDER THAN USUAL';\n} else if (score >= 95) {\n  scoreEmoji = 'üü†';\n  scoreDesc = 'AVERAGE CONDITIONS';\n} else if (score >= 80) {\n  scoreEmoji = 'üü°';\n  scoreDesc = 'DECENT TIME TO FARM';\n}\n\n// Format volume numbers\nconst formatNum = (num) => {\n  if (num >= 1000000) return `${(num/1000000).toFixed(2)}M`;\n  if (num >= 1000) return `${(num/1000).toFixed(2)}K`;\n  return num.toFixed(2);\n};\n\n// Build the message\nconst stats = data.current_stats;\nconst thresholds = data.rank_thresholds;\nconst analysis = data.analysis;\n\nlet message = `üìä *Backpack Volume Tracker Report*\\n`;\nmessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n\\n`;\n\n// Current statistics\nmessage += `üìà *Current Volume Statistics*\\n`;\nmessage += `Week: \\`${data.week_identifier}\\`\\n`;\nmessage += `Total Volume: \\`$${formatNum(stats.total_volume)}\\`\\n`;\nmessage += `Average Volume: \\`$${formatNum(stats.avg_volume)}\\`\\n`;\nmessage += `Median Volume: \\`$${formatNum(stats.median_volume)}\\`\\n`;\nmessage += `Traders Tracked: \\`${stats.total_entries}\\`\\n\\n`;\n\n// Rank thresholds\nmessage += `üèÜ *Rank Thresholds (Volume Needed)*\\n`;\nmessage += `Top 10: \\`$${formatNum(thresholds.top_10)}\\`\\n`;\nmessage += `Top 50: \\`$${formatNum(thresholds.top_50)}\\`\\n`;\nmessage += `Top 100: \\`$${formatNum(thresholds.top_100)}\\`\\n`;\nmessage += `Top 250: \\`$${formatNum(thresholds.top_250)}\\`\\n`;\nmessage += `Top 500: \\`$${formatNum(thresholds.top_500)}\\`\\n`;\nmessage += `Top 1000: \\`$${formatNum(thresholds.top_1000)}\\`\\n\\n`;\n\n// Historical comparison (if available)\nif (data.historical_snapshots >= 2) {\n  message += `üìä *Historical Comparison*\\n`;\n  message += `Total Volume Change: \\`${analysis.total_volume_change > 0 ? '+' : ''}${analysis.total_volume_change}%\\`\\n`;\n  message += `Avg Volume Change: \\`${analysis.avg_volume_change > 0 ? '+' : ''}${analysis.avg_volume_change}%\\`\\n`;\n  message += `Historical Snapshots: \\`${data.historical_snapshots}\\`\\n\\n`;\n  \n  message += `${scoreEmoji} *Difficulty Score: ${score.toFixed(1)}*\\n`;\n  message += `${scoreDesc}\\n\\n`;\n  \n  message += `üí° *Recommendation*\\n`;\n  message += `${analysis.recommendation}\\n\\n`;\n} else {\n  message += `üìä *Historical Analysis*\\n`;\n  message += `Snapshots Collected: \\`${data.historical_snapshots}/2\\`\\n`;\n  message += `‚è≥ Need ${2 - data.historical_snapshots} more snapshot(s) for analysis\\n\\n`;\n}\n\nmessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n`;\nmessage += `üïê ${new Date(data.timestamp).toLocaleString()}\\n`;\nmessage += `Snapshot ID: \\`${data.snapshot_id}\\``;\n\nreturn {\n  json: {\n    text: message,\n    parseMode: 'Markdown'\n  }\n};"
      },
      "id": "format-message",
      "name": "Format Telegram Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 240]
    },
    {
      "parameters": {
        "functionCode": "// Set your Telegram Chat ID here\n// You can get this from @userinfobot on Telegram\nreturn {\n  json: {\n    ...items[0].json,\n    chatId: 'YOUR_CHAT_ID_HERE'\n  }\n};"
      },
      "id": "set-chat-id",
      "name": "Set Chat ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 240],
      "alwaysOutputData": true,
      "notes": "Replace YOUR_CHAT_ID_HERE with your actual Telegram chat ID"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "={{ $json.parseMode }}"
        }
      },
      "id": "send-telegram",
      "name": "Send to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [1120, 240],
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot API"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// This node handles errors from the Python script\nconst error = $input.item.json.error || 'Unknown error occurred';\nconst stderr = $input.item.json.stderr || '';\n\nlet message = `‚ö†Ô∏è *Backpack Volume Tracker - Execution Error*\\n\\n`;\nmessage += `An error occurred while collecting volume data.\\n\\n`;\nmessage += `*Error Details:*\\n\\`\\`\\`\\n${error}\\n${stderr}\\n\\`\\`\\`\\n\\n`;\nmessage += `üïê ${new Date().toLocaleString()}\\n\\n`;\nmessage += `Please check the logs and ensure:\\n`;\nmessage += `‚Ä¢ Python script is accessible\\n`;\nmessage += `‚Ä¢ Internet connection is active\\n`;\nmessage += `‚Ä¢ Backpack API is responding`;\n\nreturn {\n  json: {\n    text: message,\n    parseMode: 'Markdown'\n  }\n};"
      },
      "id": "format-error",
      "name": "Format Error Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [680, 440]
    },
    {
      "parameters": {
        "functionCode": "// Set your Telegram Chat ID here\n// You can get this from @userinfobot on Telegram\nreturn {\n  json: {\n    ...items[0].json,\n    chatId: 'YOUR_CHAT_ID_HERE'\n  }\n};"
      },
      "id": "set-chat-id-error",
      "name": "Set Chat ID (Error)",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [900, 440],
      "alwaysOutputData": true,
      "notes": "Replace YOUR_CHAT_ID_HERE with your actual Telegram chat ID"
    },
    {
      "parameters": {
        "chatId": "={{ $json.chatId }}",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "parse_mode": "={{ $json.parseMode }}"
        }
      },
      "id": "send-error-telegram",
      "name": "Send Error to Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [1120, 440],
      "credentials": {
        "telegramApi": {
          "id": "1",
          "name": "Telegram Bot API"
        }
      }
    }
  ],
  "connections": {
    "Schedule Morning (8 AM)": {
      "main": [
        [
          {
            "node": "Execute Python Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Evening (8 PM)": {
      "main": [
        [
          {
            "node": "Execute Python Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Python Script": {
      "main": [
        [
          {
            "node": "Format Telegram Message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Format Error Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Telegram Message": {
      "main": [
        [
          {
            "node": "Set Chat ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Chat ID": {
      "main": [
        [
          {
            "node": "Send to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Error Message": {
      "main": [
        [
          {
            "node": "Set Chat ID (Error)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Chat ID (Error)": {
      "main": [
        [
          {
            "node": "Send Error to Telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-12T00:00:00.000Z",
  "versionId": "1"
}
